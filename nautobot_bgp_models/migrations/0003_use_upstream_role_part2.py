# Generated by Django 3.2.17 on 2023-02-12 19:21

from django.db import migrations


def create_roles(apps, schema_editor):
    ContentType = apps.get_model("contenttypes.ContentType")
    PeeringRole = apps.get_model("nautobot_bgp_models.PeeringRole")
    NautobotRole = apps.get_model("extras.Role")
    PeerGroup = apps.get_model("nautobot_bgp_models.PeerGroup")
    PeerGroupTemplate = apps.get_model("nautobot_bgp_models.PeerGroupTemplate")
    PeerEndpoint = apps.get_model("nautobot_bgp_models.PeerEndpoint")
    pg_ct = ContentType.objects.get_for_model(PeerGroup)
    pgt_ct = ContentType.objects.get_for_model(PeerGroupTemplate)
    pe_ct = ContentType.objects.get_for_model(PeerEndpoint)
    for role in PeeringRole.objects.all():
        nb_role, _ = NautobotRole.objects.get_or_create(
            name=role.name, slug=role.slug, color=role.color, description=role.description
        )
        nb_role.content_types.add(pg_ct)
        nb_role.content_types.add(pgt_ct)
        nb_role.content_types.add(pe_ct)
    for group in PeerGroup.objects.exclude(role__isnull=True, role__slug__exact=""):
        group.role_new = NautobotRole.objects.get(slug=group.role.slug)
        group.save()
    for group in PeerGroupTemplate.objects.exclude(role__isnull=True, role__slug__exact=""):
        group.role_new = NautobotRole.objects.get(slug=group.role.slug)
        group.save()
    for peer in PeerEndpoint.objects.exclude(role__isnull=True, role__slug__exact=""):
        peer.role_new = NautobotRole.objects.get(slug=peer.role.slug)
        peer.save()


def reverse_create_roles(apps, schema_editor):
    PeeringRole = apps.get_model("nautobot_bgp_models.PeeringRole")
    PeerGroup = apps.get_model("nautobot_bgp_models.PeerGroup")
    PeerGroupTemplate = apps.get_model("nautobot_bgp_models.PeerGroupTemplate")
    PeerEndpoint = apps.get_model("nautobot_bgp_models.PeerEndpoint")
    for group in PeerGroup.objects.exclude(role_new__isnull=True, role_new__slug__exact=""):
        group.role, _ = PeeringRole.objects.get_or_create(
            name=group.role_new.name,
            slug=group.role_new.slug,
            color=group.role_new.color,
            description=group.role_new.description,
        )[0]
        group.save()
    for group in PeerGroupTemplate.objects.exclude(role_new__isnull=True, role_new__slug__exact=""):
        group.role, _ = PeeringRole.objects.get_or_create(
            name=group.role_new.name,
            slug=group.role_new.slug,
            color=group.role_new.color,
            description=group.role_new.description,
        )[0]
        group.save()
    for peer in PeerEndpoint.objects.exclude(role_new__isnull=True, role_new__slug__exact=""):
        peer.role, _ = PeeringRole.objects.get_or_create(
            name=peer.role_new.name,
            slug=peer.role_new.slug,
            color=peer.role_new.color,
            description=peer.role_new.description,
        )[0]
        peer.save()


class Migration(migrations.Migration):
    dependencies = [
        ("extras", "0062_rename_configcontext_role"),
        ("nautobot_bgp_models", "0002_use_upstream_role_part1"),
    ]

    operations = [
        migrations.RunPython(code=create_roles, reverse_code=reverse_create_roles),
    ]
